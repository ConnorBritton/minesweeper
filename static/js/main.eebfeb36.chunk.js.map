{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Grid","grid","style","display","backgroundColor","gridTemplateRows","length","gridTemplateColumns","gridGap","map","row","rowIdx","cell","colIdx","Cell","key","cellStyle","height","width","handleClick","type","onClick","NEXT_TURN","O","X","initialState","columns","mapper","Array","fill","newTicTacToeGrid","turn","reducer","state","action","payload","x","y","nextState","JSON","parse","stringify","clone","Game","React","useReducer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAsBA,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACd,OACE,yBAAKC,MAAO,CAAEC,QAAS,iBACrB,yBACED,MAAO,CACLE,gBAAiB,OACjBD,QAAS,OACTE,iBAAiB,UAAD,OAAYJ,EAAKK,OAAjB,UAChBC,oBAAoB,UAAD,OAAYN,EAAK,GAAGK,OAApB,UACnBE,QAAS,IAGVP,EAAKQ,KAAI,SAACC,EAAKC,GAAN,OACRD,EAAID,KAAI,SAACG,EAAMC,GAAP,OACN,kBAACC,EAAD,CAAMC,IAAG,UAAKF,EAAL,YAAeF,GAAUC,KAAMA,YAQpD,IAAMI,EAAY,CAChBZ,gBAAiB,OACjBa,OAAQ,GACRC,MAAO,IAGT,SAASJ,EAAT,GAAsC,IAAtBF,EAAqB,EAArBA,KAAMO,EAAe,EAAfA,YACpB,OACE,yBAAKjB,MAAOc,GACV,4BAAQI,KAAK,SAASC,QAASF,GAC5BP,IAOT,IAGMU,EAAY,CAChBC,EAAG,IACHC,EAAG,KAGCC,EAAe,CACnBxB,KAnDuB,kBALGyB,EAMV,EANmBC,EAMhB,kBAAM,MALlBC,MAKM,GALMC,OAAOpB,KAAI,kBAC5BmB,MAAMF,GAASG,OAAOpB,IAAIkB,MAF9B,IAA4BD,EAASC,EAwD7BG,GACNC,KAAM,KAGFC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOd,MACb,IAAK,QAAU,IAAD,EACKc,EAAOC,QAAhBC,EADI,EACJA,EAAGC,EADC,EACDA,EACLC,EAjBE,SAAAF,GAAC,OAAIG,KAAKC,MAAMD,KAAKE,UAAUL,IAiBrBM,CAAMT,GAChBhC,EAAeqC,EAAfrC,KAAM8B,EAASO,EAATP,KAGd,OAAG9B,EAAKoC,GAAGD,GACFH,GAGThC,EAAKoC,GAAGD,GAAKL,EAEbO,EAAUP,KAAOT,EAAUS,GAEpBO,GAGT,QACE,OAAOL,IAIb,SAASU,IAAQ,IAAD,EACYC,IAAMC,WAAWb,EAASP,GADtC,mBACPQ,EADO,KAENhC,GAFM,KAEGgC,EAAThC,MAMR,OAAO,kBAACD,EAAD,CAAMC,KAAMA,IAGN6C,MA1Gf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,qDAEF,kBAACJ,EAAD,QCGcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eebfeb36.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tic Tac Toe in React</h1>\n      </header>\n      <Game />\n    </div>\n  );\n}\n\nfunction generateGrid(rows, columns, mapper) {\n  return Array(rows).fill().map(() =>\n    Array(columns).fill().map(mapper))\n}\n\nconst newTicTacToeGrid = () =>\n  generateGrid(3, 3, () => null)\n\nfunction Grid({ grid }) {\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <div\n        style={{\n          backgroundColor: '#000',\n          display: 'grid',\n          gridTemplateRows: `repeat(${grid.length}, 1fr)`,\n          gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`,\n          gridGap: 2,\n        }}\n      >\n        {grid.map((row, rowIdx) =>\n          row.map((cell, colIdx) => (\n            <Cell key={`${colIdx}-${rowIdx}`} cell={cell} />          \n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst cellStyle = {\n  backgroundColor: '#fff',\n  height: 75,\n  width: 75,\n}\n\nfunction Cell({ cell, handleClick }) {\n  return (\n    <div style={cellStyle}>\n      <button type=\"button\" onClick={handleClick}>\n        {cell}\n      </button>\n    </div>\n  )\n}\n\n// deeply clone array or object\nconst clone = x => JSON.parse(JSON.stringify(x))\n\n// enum to get next turn\nconst NEXT_TURN = {\n  O: 'X',\n  X: 'O',\n}\n\nconst initialState = {\n  grid: newTicTacToeGrid(),\n  turn: 'X',\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CLICK': {\n      const { x, y } = action.payload\n      const nextState = clone(state)\n      const { grid, turn } = nextState\n\n      // if the cell already has a value, clicking on it should do nothing\n      if(grid[y][x]) {\n        return state\n      }\n\n      grid[y][x] = turn\n\n      nextState.turn = NEXT_TURN[turn]\n\n      return nextState\n    }\n\n    default:\n      return state\n  }\n}\n\nfunction Game() {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const { grid } = state\n\n  const handleClick = (x, y) => {\n    dispatch({ type: 'CLICK', payload: { x, y } })\n  }\n\n  return <Grid grid={grid} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}